
brightnessTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080022c8  080022c8  000122c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002308  08002308  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002308  08002308  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002308  08002308  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002308  08002308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800230c  0800230c  0001230c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000000c  0800231c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  0800231c  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b11e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b85  00000000  00000000  0002b153  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  0002ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0002d770  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017389  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000912a  00000000  00000000  000454a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085958  00000000  00000000  0004e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3f2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000d3fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022b0 	.word	0x080022b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080022b0 	.word	0x080022b0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b086      	sub	sp, #24
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fad1 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f82f 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f90d 	bl	8000388 <MX_GPIO_Init>
  MX_SPI2_Init();
 800016e:	f000 f887 	bl	8000280 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8bd 	bl	80002f0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000176:	f000 f8e5 	bl	8000344 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  char message[] = "UART serial works!\n";
 800017a:	4b10      	ldr	r3, [pc, #64]	; (80001bc <main+0x60>)
 800017c:	1d3c      	adds	r4, r7, #4
 800017e:	461d      	mov	r5, r3
 8000180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000184:	682b      	ldr	r3, [r5, #0]
 8000186:	6023      	str	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (HAL_UART_Transmit_IT(&huart1, message, strlen(message)) != HAL_OK) {
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	4618      	mov	r0, r3
 800018c:	f7ff ffde 	bl	800014c <strlen>
 8000190:	4603      	mov	r3, r0
 8000192:	b29a      	uxth	r2, r3
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	4619      	mov	r1, r3
 8000198:	4809      	ldr	r0, [pc, #36]	; (80001c0 <main+0x64>)
 800019a:	f001 fcf6 	bl	8001b8a <HAL_UART_Transmit_IT>
 800019e:	4603      	mov	r3, r0
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d001      	beq.n	80001a8 <main+0x4c>
      Error_Handler();
 80001a4:	f000 f95e 	bl	8000464 <Error_Handler>
    }
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <main+0x68>)
 80001ae:	f000 fe25 	bl	8000dfc <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80001b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b6:	f000 fb09 	bl	80007cc <HAL_Delay>
    if (HAL_UART_Transmit_IT(&huart1, message, strlen(message)) != HAL_OK) {
 80001ba:	e7e5      	b.n	8000188 <main+0x2c>
 80001bc:	080022c8 	.word	0x080022c8
 80001c0:	20000080 	.word	0x20000080
 80001c4:	40011000 	.word	0x40011000

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b094      	sub	sp, #80	; 0x50
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 f862 	bl	80022a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	f107 0314 	add.w	r3, r7, #20
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	609a      	str	r2, [r3, #8]
 80001e8:	60da      	str	r2, [r3, #12]
 80001ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000214:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000218:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f000 ff10 	bl	8001044 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022a:	f000 f91b 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000244:	f107 0314 	add.w	r3, r7, #20
 8000248:	2101      	movs	r1, #1
 800024a:	4618      	mov	r0, r3
 800024c:	f001 f97a 	bl	8001544 <HAL_RCC_ClockConfig>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000256:	f000 f905 	bl	8000464 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800025a:	2310      	movs	r3, #16
 800025c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800025e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000262:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	4618      	mov	r0, r3
 8000268:	f001 fb08 	bl	800187c <HAL_RCCEx_PeriphCLKConfig>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d001      	beq.n	8000276 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000272:	f000 f8f7 	bl	8000464 <Error_Handler>
  }
}
 8000276:	bf00      	nop
 8000278:	3750      	adds	r7, #80	; 0x50
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_SPI2_Init+0x68>)
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <MX_SPI2_Init+0x6c>)
 8000288:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_SPI2_Init+0x68>)
 800028c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000290:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <MX_SPI2_Init+0x68>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_SPI2_Init+0x68>)
 800029a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800029e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002ac:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002bc:	2200      	movs	r2, #0
 80002be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002ce:	220a      	movs	r2, #10
 80002d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_SPI2_Init+0x68>)
 80002d4:	f001 fb88 	bl	80019e8 <HAL_SPI_Init>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80002de:	f000 f8c1 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40003800 	.word	0x40003800

080002f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART1_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART1_UART_Init+0x4c>)
 80002fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000316:	2208      	movs	r2, #8
 8000318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART1_UART_Init+0x4c>)
 8000328:	f001 fbe2 	bl	8001af0 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f897 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000080 	.word	0x20000080
 8000340:	40013800 	.word	0x40013800

08000344 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_USB_PCD_Init+0x3c>)
 800034a:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <MX_USB_PCD_Init+0x40>)
 800034c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_USB_PCD_Init+0x3c>)
 8000350:	2208      	movs	r2, #8
 8000352:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_USB_PCD_Init+0x3c>)
 8000356:	2202      	movs	r2, #2
 8000358:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_USB_PCD_Init+0x3c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_USB_PCD_Init+0x3c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_USB_PCD_Init+0x3c>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_USB_PCD_Init+0x3c>)
 800036e:	f000 fd5e 	bl	8000e2e <HAL_PCD_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000378:	f000 f874 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200000c0 	.word	0x200000c0
 8000384:	40005c00 	.word	0x40005c00

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b2e      	ldr	r3, [pc, #184]	; (8000458 <MX_GPIO_Init+0xd0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2d      	ldr	r2, [pc, #180]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a27      	ldr	r2, [pc, #156]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a21      	ldr	r2, [pc, #132]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003d2:	f043 0308 	orr.w	r3, r3, #8
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_GPIO_Init+0xd0>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000402:	4816      	ldr	r0, [pc, #88]	; (800045c <MX_GPIO_Init+0xd4>)
 8000404:	f000 fce2 	bl	8000dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800040e:	4814      	ldr	r0, [pc, #80]	; (8000460 <MX_GPIO_Init+0xd8>)
 8000410:	f000 fcdc 	bl	8000dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800041a:	2311      	movs	r3, #17
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	480b      	ldr	r0, [pc, #44]	; (800045c <MX_GPIO_Init+0xd4>)
 800042e:	f000 fb73 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000432:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2302      	movs	r3, #2
 8000442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4805      	ldr	r0, [pc, #20]	; (8000460 <MX_GPIO_Init+0xd8>)
 800044c:	f000 fb64 	bl	8000b18 <HAL_GPIO_Init>

}
 8000450:	bf00      	nop
 8000452:	3720      	adds	r7, #32
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	40011000 	.word	0x40011000
 8000460:	40010c00 	.word	0x40010c00

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1) {
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <Error_Handler+0x18>)
 800046e:	f000 fcc5 	bl	8000dfc <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000472:	20c8      	movs	r0, #200	; 0xc8
 8000474:	f000 f9aa 	bl	80007cc <HAL_Delay>
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000478:	e7f6      	b.n	8000468 <Error_Handler+0x4>
 800047a:	bf00      	nop
 800047c:	40011000 	.word	0x40011000

08000480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000486:	4b15      	ldr	r3, [pc, #84]	; (80004dc <HAL_MspInit+0x5c>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <HAL_MspInit+0x5c>)
 800048c:	f043 0301 	orr.w	r3, r3, #1
 8000490:	6193      	str	r3, [r2, #24]
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049e:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <HAL_MspInit+0x5c>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <HAL_MspInit+0x5c>)
 80004a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a8:	61d3      	str	r3, [r2, #28]
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_MspInit+0x60>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <HAL_MspInit+0x60>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000

080004e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <HAL_SPI_MspInit+0x74>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d124      	bne.n	800054e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_SPI_MspInit+0x78>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <HAL_SPI_MspInit+0x78>)
 800050a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800050e:	61d3      	str	r3, [r2, #28]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_SPI_MspInit+0x78>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_SPI_MspInit+0x78>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <HAL_SPI_MspInit+0x78>)
 8000522:	f043 0308 	orr.w	r3, r3, #8
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_SPI_MspInit+0x78>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0308 	and.w	r3, r3, #8
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000534:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000538:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053e:	2303      	movs	r3, #3
 8000540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <HAL_SPI_MspInit+0x7c>)
 800054a:	f000 fae5 	bl	8000b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40003800 	.word	0x40003800
 800055c:	40021000 	.word	0x40021000
 8000560:	40010c00 	.word	0x40010c00

08000564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a20      	ldr	r2, [pc, #128]	; (8000600 <HAL_UART_MspInit+0x9c>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d139      	bne.n	80005f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <HAL_UART_MspInit+0xa0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <HAL_UART_MspInit+0xa0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_UART_MspInit+0xa0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_UART_MspInit+0xa0>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <HAL_UART_MspInit+0xa0>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_UART_MspInit+0xa0>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4619      	mov	r1, r3
 80005c8:	480f      	ldr	r0, [pc, #60]	; (8000608 <HAL_UART_MspInit+0xa4>)
 80005ca:	f000 faa5 	bl	8000b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4809      	ldr	r0, [pc, #36]	; (8000608 <HAL_UART_MspInit+0xa4>)
 80005e4:	f000 fa98 	bl	8000b18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2025      	movs	r0, #37	; 0x25
 80005ee:	f000 f9e6 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005f2:	2025      	movs	r0, #37	; 0x25
 80005f4:	f000 f9ff 	bl	80009f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40013800 	.word	0x40013800
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a09      	ldr	r2, [pc, #36]	; (8000640 <HAL_PCD_MspInit+0x34>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d10b      	bne.n	8000636 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_PCD_MspInit+0x38>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <HAL_PCD_MspInit+0x38>)
 8000624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_PCD_MspInit+0x38>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	40005c00 	.word	0x40005c00
 8000644:	40021000 	.word	0x40021000

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <HardFault_Handler+0x4>

0800065a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <MemManage_Handler+0x4>

08000660 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <BusFault_Handler+0x4>

08000666 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <UsageFault_Handler+0x4>

0800066c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000694:	f000 f87e 	bl	8000794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <USART1_IRQHandler+0x10>)
 80006a2:	f001 fab7 	bl	8001c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000080 	.word	0x20000080

080006b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006be:	e003      	b.n	80006c8 <LoopCopyDataInit>

080006c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006c6:	3104      	adds	r1, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006d0:	d3f6      	bcc.n	80006c0 <CopyDataInit>
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006d4:	e002      	b.n	80006dc <LoopFillZerobss>

080006d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006d8:	f842 3b04 	str.w	r3, [r2], #4

080006dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006e0:	d3f9      	bcc.n	80006d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006e2:	f7ff ffe5 	bl	80006b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e6:	f001 fdb7 	bl	8002258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ea:	f7ff fd37 	bl	800015c <main>
  bx lr
 80006ee:	4770      	bx	lr
  ldr r3, =_sidata
 80006f0:	08002310 	.word	0x08002310
  ldr r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80006fc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000700:	200003b0 	.word	0x200003b0

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f945 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f808 	bl	8000734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff feac 	bl	8000480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_InitTick+0x54>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_InitTick+0x58>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f95d 	bl	8000a12 <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e00e      	b.n	8000780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b0f      	cmp	r3, #15
 8000766:	d80a      	bhi.n	800077e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f000 f925 	bl	80009be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_InitTick+0x5c>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	e000      	b.n	8000780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000000 	.word	0x20000000
 800078c:	20000008 	.word	0x20000008
 8000790:	20000004 	.word	0x20000004

08000794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_IncTick+0x1c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x20>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <HAL_IncTick+0x20>)
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	20000008 	.word	0x20000008
 80007b4:	200003ac 	.word	0x200003ac

080007b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return uwTick;
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <HAL_GetTick+0x10>)
 80007be:	681b      	ldr	r3, [r3, #0]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	200003ac 	.word	0x200003ac

080007cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007d4:	f7ff fff0 	bl	80007b8 <HAL_GetTick>
 80007d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007e4:	d005      	beq.n	80007f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_Delay+0x40>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4413      	add	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007f2:	bf00      	nop
 80007f4:	f7ff ffe0 	bl	80007b8 <HAL_GetTick>
 80007f8:	4602      	mov	r2, r0
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <HAL_Delay+0x28>
  {
  }
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000008 	.word	0x20000008

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4906      	ldr	r1, [pc, #24]	; (80008a8 <__NVIC_EnableIRQ+0x34>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	; (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	bf28      	it	cs
 800091e:	2304      	movcs	r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3304      	adds	r3, #4
 8000926:	2b06      	cmp	r3, #6
 8000928:	d902      	bls.n	8000930 <NVIC_EncodePriority+0x30>
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3b03      	subs	r3, #3
 800092e:	e000      	b.n	8000932 <NVIC_EncodePriority+0x32>
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43da      	mvns	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43d9      	mvns	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
         );
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000974:	d301      	bcc.n	800097a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000976:	2301      	movs	r3, #1
 8000978:	e00f      	b.n	800099a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <SysTick_Config+0x40>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000982:	210f      	movs	r1, #15
 8000984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000988:	f7ff ff90 	bl	80008ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x40>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff2d 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d0:	f7ff ff42 	bl	8000858 <__NVIC_GetPriorityGrouping>
 80009d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f7ff ff90 	bl	8000900 <NVIC_EncodePriority>
 80009e0:	4602      	mov	r2, r0
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff5f 	bl	80008ac <__NVIC_SetPriority>
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff35 	bl	8000874 <__NVIC_EnableIRQ>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ffa2 	bl	8000964 <SysTick_Config>
 8000a20:	4603      	mov	r3, r0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d005      	beq.n	8000a4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e051      	b.n	8000af2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f022 020e 	bic.w	r2, r2, #14
 8000a5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 0201 	bic.w	r2, r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_DMA_Abort_IT+0xd0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d029      	beq.n	8000acc <HAL_DMA_Abort_IT+0xa0>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <HAL_DMA_Abort_IT+0xd4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d022      	beq.n	8000ac8 <HAL_DMA_Abort_IT+0x9c>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <HAL_DMA_Abort_IT+0xd8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d01a      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0x96>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_DMA_Abort_IT+0xdc>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d012      	beq.n	8000abc <HAL_DMA_Abort_IT+0x90>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <HAL_DMA_Abort_IT+0xe0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d00a      	beq.n	8000ab6 <HAL_DMA_Abort_IT+0x8a>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <HAL_DMA_Abort_IT+0xe4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d102      	bne.n	8000ab0 <HAL_DMA_Abort_IT+0x84>
 8000aaa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aae:	e00e      	b.n	8000ace <HAL_DMA_Abort_IT+0xa2>
 8000ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ab4:	e00b      	b.n	8000ace <HAL_DMA_Abort_IT+0xa2>
 8000ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aba:	e008      	b.n	8000ace <HAL_DMA_Abort_IT+0xa2>
 8000abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac0:	e005      	b.n	8000ace <HAL_DMA_Abort_IT+0xa2>
 8000ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac6:	e002      	b.n	8000ace <HAL_DMA_Abort_IT+0xa2>
 8000ac8:	2310      	movs	r3, #16
 8000aca:	e000      	b.n	8000ace <HAL_DMA_Abort_IT+0xa2>
 8000acc:	2301      	movs	r3, #1
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <HAL_DMA_Abort_IT+0xe8>)
 8000ad0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	4798      	blx	r3
    } 
  }
  return status;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40020008 	.word	0x40020008
 8000b00:	4002001c 	.word	0x4002001c
 8000b04:	40020030 	.word	0x40020030
 8000b08:	40020044 	.word	0x40020044
 8000b0c:	40020058 	.word	0x40020058
 8000b10:	4002006c 	.word	0x4002006c
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b2a:	e127      	b.n	8000d7c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	69fa      	ldr	r2, [r7, #28]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 8116 	bne.w	8000d76 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	2b12      	cmp	r3, #18
 8000b50:	d034      	beq.n	8000bbc <HAL_GPIO_Init+0xa4>
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d80d      	bhi.n	8000b72 <HAL_GPIO_Init+0x5a>
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d02b      	beq.n	8000bb2 <HAL_GPIO_Init+0x9a>
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d804      	bhi.n	8000b68 <HAL_GPIO_Init+0x50>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d031      	beq.n	8000bc6 <HAL_GPIO_Init+0xae>
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d01c      	beq.n	8000ba0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b66:	e048      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d043      	beq.n	8000bf4 <HAL_GPIO_Init+0xdc>
 8000b6c:	2b11      	cmp	r3, #17
 8000b6e:	d01b      	beq.n	8000ba8 <HAL_GPIO_Init+0x90>
          break;
 8000b70:	e043      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b72:	4a89      	ldr	r2, [pc, #548]	; (8000d98 <HAL_GPIO_Init+0x280>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d026      	beq.n	8000bc6 <HAL_GPIO_Init+0xae>
 8000b78:	4a87      	ldr	r2, [pc, #540]	; (8000d98 <HAL_GPIO_Init+0x280>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d806      	bhi.n	8000b8c <HAL_GPIO_Init+0x74>
 8000b7e:	4a87      	ldr	r2, [pc, #540]	; (8000d9c <HAL_GPIO_Init+0x284>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d020      	beq.n	8000bc6 <HAL_GPIO_Init+0xae>
 8000b84:	4a86      	ldr	r2, [pc, #536]	; (8000da0 <HAL_GPIO_Init+0x288>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d01d      	beq.n	8000bc6 <HAL_GPIO_Init+0xae>
          break;
 8000b8a:	e036      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b8c:	4a85      	ldr	r2, [pc, #532]	; (8000da4 <HAL_GPIO_Init+0x28c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d019      	beq.n	8000bc6 <HAL_GPIO_Init+0xae>
 8000b92:	4a85      	ldr	r2, [pc, #532]	; (8000da8 <HAL_GPIO_Init+0x290>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d016      	beq.n	8000bc6 <HAL_GPIO_Init+0xae>
 8000b98:	4a84      	ldr	r2, [pc, #528]	; (8000dac <HAL_GPIO_Init+0x294>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d013      	beq.n	8000bc6 <HAL_GPIO_Init+0xae>
          break;
 8000b9e:	e02c      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e028      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	3304      	adds	r3, #4
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	e023      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	3308      	adds	r3, #8
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e01e      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	330c      	adds	r3, #12
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e019      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	623b      	str	r3, [r7, #32]
          break;
 8000bd2:	e012      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d105      	bne.n	8000be8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	611a      	str	r2, [r3, #16]
          break;
 8000be6:	e008      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	615a      	str	r2, [r3, #20]
          break;
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	2bff      	cmp	r3, #255	; 0xff
 8000bfe:	d801      	bhi.n	8000c04 <HAL_GPIO_Init+0xec>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	e001      	b.n	8000c08 <HAL_GPIO_Init+0xf0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3304      	adds	r3, #4
 8000c08:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	2bff      	cmp	r3, #255	; 0xff
 8000c0e:	d802      	bhi.n	8000c16 <HAL_GPIO_Init+0xfe>
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	e002      	b.n	8000c1c <HAL_GPIO_Init+0x104>
 8000c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	210f      	movs	r1, #15
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	6a39      	ldr	r1, [r7, #32]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	431a      	orrs	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 8096 	beq.w	8000d76 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4a:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <HAL_GPIO_Init+0x298>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a58      	ldr	r2, [pc, #352]	; (8000db0 <HAL_GPIO_Init+0x298>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b56      	ldr	r3, [pc, #344]	; (8000db0 <HAL_GPIO_Init+0x298>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c62:	4a54      	ldr	r2, [pc, #336]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3302      	adds	r3, #2
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	220f      	movs	r2, #15
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	4013      	ands	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a4b      	ldr	r2, [pc, #300]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d013      	beq.n	8000cb6 <HAL_GPIO_Init+0x19e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a4a      	ldr	r2, [pc, #296]	; (8000dbc <HAL_GPIO_Init+0x2a4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00d      	beq.n	8000cb2 <HAL_GPIO_Init+0x19a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a49      	ldr	r2, [pc, #292]	; (8000dc0 <HAL_GPIO_Init+0x2a8>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d007      	beq.n	8000cae <HAL_GPIO_Init+0x196>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a48      	ldr	r2, [pc, #288]	; (8000dc4 <HAL_GPIO_Init+0x2ac>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_GPIO_Init+0x192>
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x1a0>
 8000caa:	2304      	movs	r3, #4
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x1a0>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x1a0>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x1a0>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cba:	f002 0203 	and.w	r2, r2, #3
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cc8:	493a      	ldr	r1, [pc, #232]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ce2:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	4938      	ldr	r1, [pc, #224]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cf0:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	4933      	ldr	r1, [pc, #204]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d006      	beq.n	8000d18 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	492e      	ldr	r1, [pc, #184]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	604b      	str	r3, [r1, #4]
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d18:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	4929      	ldr	r1, [pc, #164]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d006      	beq.n	8000d40 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	4924      	ldr	r1, [pc, #144]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	608b      	str	r3, [r1, #8]
 8000d3e:	e006      	b.n	8000d4e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d40:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	43db      	mvns	r3, r3
 8000d48:	491f      	ldr	r1, [pc, #124]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	491a      	ldr	r1, [pc, #104]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60cb      	str	r3, [r1, #12]
 8000d66:	e006      	b.n	8000d76 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	4915      	ldr	r1, [pc, #84]	; (8000dc8 <HAL_GPIO_Init+0x2b0>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d78:	3301      	adds	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	fa22 f303 	lsr.w	r3, r2, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f47f aed0 	bne.w	8000b2c <HAL_GPIO_Init+0x14>
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	372c      	adds	r7, #44	; 0x2c
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	10210000 	.word	0x10210000
 8000d9c:	10110000 	.word	0x10110000
 8000da0:	10120000 	.word	0x10120000
 8000da4:	10310000 	.word	0x10310000
 8000da8:	10320000 	.word	0x10320000
 8000dac:	10220000 	.word	0x10220000
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40011400 	.word	0x40011400
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ddc:	787b      	ldrb	r3, [r7, #1]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000de2:	887a      	ldrh	r2, [r7, #2]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000de8:	e003      	b.n	8000df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	041a      	lsls	r2, r3, #16
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	611a      	str	r2, [r3, #16]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4013      	ands	r3, r2
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43d9      	mvns	r1, r3
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	400b      	ands	r3, r1
 8000e1e:	431a      	orrs	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	611a      	str	r2, [r3, #16]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e30:	b08b      	sub	sp, #44	; 0x2c
 8000e32:	af06      	add	r7, sp, #24
 8000e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e0fd      	b.n	800103c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fbd9 	bl	800060c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f9a6 	bl	80021b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	687e      	ldr	r6, [r7, #4]
 8000e74:	466d      	mov	r5, sp
 8000e76:	f106 0410 	add.w	r4, r6, #16
 8000e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	602b      	str	r3, [r5, #0]
 8000e82:	1d33      	adds	r3, r6, #4
 8000e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f001 f986 	bl	8002198 <USB_CoreInit>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2202      	movs	r2, #2
 8000e96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e0ce      	b.n	800103c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 f9a1 	bl	80021ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e04c      	b.n	8000f4a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	b298      	uxth	r0, r3
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3336      	adds	r3, #54	; 0x36
 8000eee:	4602      	mov	r2, r0
 8000ef0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	3303      	adds	r3, #3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	3338      	adds	r3, #56	; 0x38
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	333c      	adds	r3, #60	; 0x3c
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3340      	adds	r3, #64	; 0x40
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	3301      	adds	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3ad      	bcc.n	8000eb0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e044      	b.n	8000fe4 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	440b      	add	r3, r1
 8000faa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d3b5      	bcc.n	8000f5a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	687e      	ldr	r6, [r7, #4]
 8000ff6:	466d      	mov	r5, sp
 8000ff8:	f106 0410 	add.w	r4, r6, #16
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	1d33      	adds	r3, r6, #4
 8001006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001008:	6838      	ldr	r0, [r7, #0]
 800100a:	f001 f8fb 	bl	8002204 <USB_DevInit>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e00d      	b.n	800103c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f001 f905 	bl	8002244 <USB_DevDisconnect>

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e26c      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8087 	beq.w	8001172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001064:	4b92      	ldr	r3, [pc, #584]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	2b04      	cmp	r3, #4
 800106e:	d00c      	beq.n	800108a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001070:	4b8f      	ldr	r3, [pc, #572]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b08      	cmp	r3, #8
 800107a:	d112      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
 800107c:	4b8c      	ldr	r3, [pc, #560]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001088:	d10b      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108a:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d06c      	beq.n	8001170 <HAL_RCC_OscConfig+0x12c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d168      	bne.n	8001170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e246      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x76>
 80010ac:	4b80      	ldr	r3, [pc, #512]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a7f      	ldr	r2, [pc, #508]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e02e      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c2:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a7a      	ldr	r2, [pc, #488]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b78      	ldr	r3, [pc, #480]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a77      	ldr	r2, [pc, #476]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0xbc>
 80010e6:	4b72      	ldr	r3, [pc, #456]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a71      	ldr	r2, [pc, #452]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a6e      	ldr	r2, [pc, #440]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 8001100:	4b6b      	ldr	r3, [pc, #428]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a6a      	ldr	r2, [pc, #424]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a67      	ldr	r2, [pc, #412]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff fb4a 	bl	80007b8 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fb46 	bl	80007b8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e1fa      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b5d      	ldr	r3, [pc, #372]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xe4>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fb36 	bl	80007b8 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fb32 	bl	80007b8 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e1e6      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	4b53      	ldr	r3, [pc, #332]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x10c>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d063      	beq.n	8001246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800117e:	4b4c      	ldr	r3, [pc, #304]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800118a:	4b49      	ldr	r3, [pc, #292]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b08      	cmp	r3, #8
 8001194:	d11c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x18c>
 8001196:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d116      	bne.n	80011d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a2:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d005      	beq.n	80011ba <HAL_RCC_OscConfig+0x176>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d001      	beq.n	80011ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e1ba      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ba:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4939      	ldr	r1, [pc, #228]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	e03a      	b.n	8001246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d020      	beq.n	800121a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d8:	4b36      	ldr	r3, [pc, #216]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff faeb 	bl	80007b8 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011e6:	f7ff fae7 	bl	80007b8 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e19b      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001204:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	4927      	ldr	r1, [pc, #156]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e015      	b.n	8001246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <HAL_RCC_OscConfig+0x270>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff faca 	bl	80007b8 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff fac6 	bl	80007b8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e17a      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d03a      	beq.n	80012c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d019      	beq.n	800128e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_RCC_OscConfig+0x274>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff faaa 	bl	80007b8 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff faa6 	bl	80007b8 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e15a      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001286:	2001      	movs	r0, #1
 8001288:	f000 fada 	bl	8001840 <RCC_Delay>
 800128c:	e01c      	b.n	80012c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_RCC_OscConfig+0x274>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001294:	f7ff fa90 	bl	80007b8 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129a:	e00f      	b.n	80012bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff fa8c 	bl	80007b8 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d908      	bls.n	80012bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e140      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	42420000 	.word	0x42420000
 80012b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b9e      	ldr	r3, [pc, #632]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1e9      	bne.n	800129c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80a6 	beq.w	8001422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b97      	ldr	r3, [pc, #604]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10d      	bne.n	8001302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	4b94      	ldr	r3, [pc, #592]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a93      	ldr	r2, [pc, #588]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
 80012f2:	4b91      	ldr	r3, [pc, #580]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b8e      	ldr	r3, [pc, #568]	; (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d118      	bne.n	8001340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b8b      	ldr	r3, [pc, #556]	; (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a8a      	ldr	r2, [pc, #552]	; (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fa4d 	bl	80007b8 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff fa49 	bl	80007b8 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e0fd      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	4b81      	ldr	r3, [pc, #516]	; (800153c <HAL_RCC_OscConfig+0x4f8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x312>
 8001348:	4b7b      	ldr	r3, [pc, #492]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4a7a      	ldr	r2, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6213      	str	r3, [r2, #32]
 8001354:	e02d      	b.n	80013b2 <HAL_RCC_OscConfig+0x36e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x334>
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4a75      	ldr	r2, [pc, #468]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6213      	str	r3, [r2, #32]
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a72      	ldr	r2, [pc, #456]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0304 	bic.w	r3, r3, #4
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	e01c      	b.n	80013b2 <HAL_RCC_OscConfig+0x36e>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b05      	cmp	r3, #5
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x356>
 8001380:	4b6d      	ldr	r3, [pc, #436]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	4a6c      	ldr	r2, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6213      	str	r3, [r2, #32]
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a69      	ldr	r2, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	e00b      	b.n	80013b2 <HAL_RCC_OscConfig+0x36e>
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a66      	ldr	r2, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a63      	ldr	r2, [pc, #396]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d015      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff f9fd 	bl	80007b8 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff f9f9 	bl	80007b8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0ab      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	4b57      	ldr	r3, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ee      	beq.n	80013c2 <HAL_RCC_OscConfig+0x37e>
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff f9e7 	bl	80007b8 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff f9e3 	bl	80007b8 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e095      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001404:	4b4c      	ldr	r3, [pc, #304]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ee      	bne.n	80013ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d105      	bne.n	8001422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001416:	4b48      	ldr	r3, [pc, #288]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a47      	ldr	r2, [pc, #284]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800141c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8081 	beq.w	800152e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800142c:	4b42      	ldr	r3, [pc, #264]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d061      	beq.n	80014fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d146      	bne.n	80014ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <HAL_RCC_OscConfig+0x4fc>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff f9b7 	bl	80007b8 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff f9b3 	bl	80007b8 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e067      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	4b35      	ldr	r3, [pc, #212]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001474:	d108      	bne.n	8001488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	492d      	ldr	r1, [pc, #180]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a19      	ldr	r1, [r3, #32]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	430b      	orrs	r3, r1
 800149a:	4927      	ldr	r1, [pc, #156]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x4fc>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff f987 	bl	80007b8 <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff f983 	bl	80007b8 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e037      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x46a>
 80014cc:	e02f      	b.n	800152e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_RCC_OscConfig+0x4fc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff f970 	bl	80007b8 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff f96c 	bl	80007b8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e020      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x498>
 80014fa:	e018      	b.n	800152e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e013      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	429a      	cmp	r2, r3
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	40007000 	.word	0x40007000
 8001540:	42420060 	.word	0x42420060

08001544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0d0      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d910      	bls.n	8001588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 0207 	bic.w	r2, r3, #7
 800156e:	4965      	ldr	r1, [pc, #404]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b63      	ldr	r3, [pc, #396]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b8      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	4b59      	ldr	r3, [pc, #356]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b50      	ldr	r3, [pc, #320]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494d      	ldr	r1, [pc, #308]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d040      	beq.n	8001664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e073      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06b      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4936      	ldr	r1, [pc, #216]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001634:	f7ff f8c0 	bl	80007b8 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff f8bc 	bl	80007b8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e053      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d210      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 0207 	bic.w	r2, r3, #7
 800167a:	4922      	ldr	r1, [pc, #136]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e032      	b.n	80016fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4916      	ldr	r1, [pc, #88]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	490e      	ldr	r1, [pc, #56]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016d2:	f000 f821 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d6:	4601      	mov	r1, r0
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	fa21 f303 	lsr.w	r3, r1, r3
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_RCC_ClockConfig+0x1cc>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_ClockConfig+0x1d0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f81e 	bl	8000734 <HAL_InitTick>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000
 8001708:	40021000 	.word	0x40021000
 800170c:	080022f0 	.word	0x080022f0
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	b490      	push	{r4, r7}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001720:	1d3c      	adds	r4, r7, #4
 8001722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d002      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x40>
 8001752:	2b08      	cmp	r3, #8
 8001754:	d003      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x46>
 8001756:	e02d      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800175a:	623b      	str	r3, [r7, #32]
      break;
 800175c:	e02d      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	0c9b      	lsrs	r3, r3, #18
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800176a:	4413      	add	r3, r2
 800176c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001770:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	0c5b      	lsrs	r3, r3, #17
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800178a:	4413      	add	r3, r2
 800178c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001790:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001796:	fb02 f203 	mul.w	r2, r2, r3
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
 80017a2:	e004      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	623b      	str	r3, [r7, #32]
      break;
 80017b2:	e002      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017b6:	623b      	str	r3, [r7, #32]
      break;
 80017b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ba:	6a3b      	ldr	r3, [r7, #32]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3728      	adds	r7, #40	; 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc90      	pop	{r4, r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	080022dc 	.word	0x080022dc
 80017cc:	080022ec 	.word	0x080022ec
 80017d0:	40021000 	.word	0x40021000
 80017d4:	007a1200 	.word	0x007a1200
 80017d8:	003d0900 	.word	0x003d0900

080017dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <HAL_RCC_GetHCLKFreq+0x10>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	20000000 	.word	0x20000000

080017f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017f4:	f7ff fff2 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 80017f8:	4601      	mov	r1, r0
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	4a03      	ldr	r2, [pc, #12]	; (8001814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	08002300 	.word	0x08002300

08001818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800181c:	f7ff ffde 	bl	80017dc <HAL_RCC_GetHCLKFreq>
 8001820:	4601      	mov	r1, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	0adb      	lsrs	r3, r3, #11
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_GetPCLK2Freq+0x24>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	08002300 	.word	0x08002300

08001840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <RCC_Delay+0x34>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <RCC_Delay+0x38>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0a5b      	lsrs	r3, r3, #9
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800185c:	bf00      	nop
  }
  while (Delay --);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1e5a      	subs	r2, r3, #1
 8001862:	60fa      	str	r2, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f9      	bne.n	800185c <RCC_Delay+0x1c>
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d07d      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189c:	4b4f      	ldr	r3, [pc, #316]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10d      	bne.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	4a4b      	ldr	r2, [pc, #300]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b2:	61d3      	str	r3, [r2, #28]
 80018b4:	4b49      	ldr	r3, [pc, #292]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c0:	2301      	movs	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d118      	bne.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d0:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a42      	ldr	r2, [pc, #264]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018dc:	f7fe ff6c 	bl	80007b8 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	e008      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e4:	f7fe ff68 	bl	80007b8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e06d      	b.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800190a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d02e      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d027      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001928:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800192a:	4b2e      	ldr	r3, [pc, #184]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001930:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001936:	4a29      	ldr	r2, [pc, #164]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7fe ff37 	bl	80007b8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7fe ff33 	bl	80007b8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e036      	b.n	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ee      	beq.n	800194e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4917      	ldr	r1, [pc, #92]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800197e:	4313      	orrs	r3, r2
 8001980:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	4a13      	ldr	r2, [pc, #76]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800198e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001992:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	490b      	ldr	r1, [pc, #44]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d008      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	4904      	ldr	r1, [pc, #16]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40007000 	.word	0x40007000
 80019e4:	42420440 	.word	0x42420440

080019e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e076      	b.n	8001ae8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a0a:	d009      	beq.n	8001a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
 8001a12:	e005      	b.n	8001a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d106      	bne.n	8001a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7fe fd52 	bl	80004e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	0c1a      	lsrs	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f002 0204 	and.w	r2, r2, #4
 8001ac6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e03f      	b.n	8001b82 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fd24 	bl	8000564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 faa1 	bl	800207c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	4613      	mov	r3, r2
 8001b96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d130      	bne.n	8001c06 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HAL_UART_Transmit_IT+0x26>
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e029      	b.n	8001c08 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_UART_Transmit_IT+0x38>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e022      	b.n	8001c08 <HAL_UART_Transmit_IT+0x7e>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	88fa      	ldrh	r2, [r7, #6]
 8001bd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2221      	movs	r2, #33	; 0x21
 8001be6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
  }
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_UART_IRQHandler+0x52>
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f98b 	bl	8001f7a <UART_Receive_IT>
      return;
 8001c64:	e0d1      	b.n	8001e0a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80b0 	beq.w	8001dce <HAL_UART_IRQHandler+0x1ba>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_UART_IRQHandler+0x70>
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80a5 	beq.w	8001dce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_UART_IRQHandler+0x90>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xb0>
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbc:	f043 0202 	orr.w	r2, r3, #2
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_UART_IRQHandler+0xd0>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	f043 0204 	orr.w	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00f      	beq.n	8001d0e <HAL_UART_IRQHandler+0xfa>
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d104      	bne.n	8001d02 <HAL_UART_IRQHandler+0xee>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	f043 0208 	orr.w	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d078      	beq.n	8001e08 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0320 	and.w	r3, r3, #32
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <HAL_UART_IRQHandler+0x11c>
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f003 0320 	and.w	r3, r3, #32
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f925 	bl	8001f7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <HAL_UART_IRQHandler+0x144>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d031      	beq.n	8001dbc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 f876 	bl	8001e4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d88:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <HAL_UART_IRQHandler+0x1fc>)
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fe4b 	bl	8000a2c <HAL_DMA_Abort_IT>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d016      	beq.n	8001dca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001da6:	4610      	mov	r0, r2
 8001da8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001daa:	e00e      	b.n	8001dca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f843 	bl	8001e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db2:	e00a      	b.n	8001dca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f83f 	bl	8001e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dba:	e006      	b.n	8001dca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f83b 	bl	8001e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001dc8:	e01e      	b.n	8001e08 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dca:	bf00      	nop
    return;
 8001dcc:	e01c      	b.n	8001e08 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_UART_IRQHandler+0x1d6>
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f862 	bl	8001eac <UART_Transmit_IT>
    return;
 8001de8:	e00f      	b.n	8001e0a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_UART_IRQHandler+0x1f6>
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8a3 	bl	8001f4a <UART_EndTransmit_IT>
    return;
 8001e04:	bf00      	nop
 8001e06:	e000      	b.n	8001e0a <HAL_UART_IRQHandler+0x1f6>
    return;
 8001e08:	bf00      	nop
  }
}
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	08001e85 	.word	0x08001e85

08001e14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e60:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f7ff ffca 	bl	8001e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b21      	cmp	r3, #33	; 0x21
 8001ebe:	d13e      	bne.n	8001f3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d114      	bne.n	8001ef4 <UART_Transmit_IT+0x48>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d110      	bne.n	8001ef4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	1c9a      	adds	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e008      	b.n	8001f06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	1c59      	adds	r1, r3, #1
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6211      	str	r1, [r2, #32]
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4619      	mov	r1, r3
 8001f14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff52 	bl	8001e14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b22      	cmp	r3, #34	; 0x22
 8001f8c:	d170      	bne.n	8002070 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f96:	d117      	bne.n	8001fc8 <UART_Receive_IT+0x4e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d113      	bne.n	8001fc8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	1c9a      	adds	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8001fc6:	e026      	b.n	8002016 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fda:	d007      	beq.n	8001fec <UART_Receive_IT+0x72>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <UART_Receive_IT+0x80>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	701a      	strb	r2, [r3, #0]
 8001ff8:	e008      	b.n	800200c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002006:	b2da      	uxtb	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29b      	uxth	r3, r3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4619      	mov	r1, r3
 8002024:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002026:	2b00      	cmp	r3, #0
 8002028:	d120      	bne.n	800206c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0220 	bic.w	r2, r2, #32
 8002038:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002048:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0201 	bic.w	r2, r2, #1
 8002058:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fedf 	bl	8001e26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	e002      	b.n	8002072 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020b6:	f023 030c 	bic.w	r3, r3, #12
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	430b      	orrs	r3, r1
 80020c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <UART_SetConfig+0x114>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d103      	bne.n	80020ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020e4:	f7ff fb98 	bl	8001818 <HAL_RCC_GetPCLK2Freq>
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	e002      	b.n	80020f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020ec:	f7ff fb80 	bl	80017f0 <HAL_RCC_GetPCLK1Freq>
 80020f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	009a      	lsls	r2, r3, #2
 80020fc:	441a      	add	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <UART_SetConfig+0x118>)
 800210a:	fba2 2303 	umull	r2, r3, r2, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	0119      	lsls	r1, r3, #4
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	009a      	lsls	r2, r3, #2
 800211c:	441a      	add	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fbb2 f2f3 	udiv	r2, r2, r3
 8002128:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <UART_SetConfig+0x118>)
 800212a:	fba3 0302 	umull	r0, r3, r3, r2
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	2064      	movs	r0, #100	; 0x64
 8002132:	fb00 f303 	mul.w	r3, r0, r3
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	3332      	adds	r3, #50	; 0x32
 800213c:	4a15      	ldr	r2, [pc, #84]	; (8002194 <UART_SetConfig+0x118>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002148:	4419      	add	r1, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	009a      	lsls	r2, r3, #2
 8002154:	441a      	add	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <UART_SetConfig+0x118>)
 8002162:	fba3 0302 	umull	r0, r3, r3, r2
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2064      	movs	r0, #100	; 0x64
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	3332      	adds	r3, #50	; 0x32
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <UART_SetConfig+0x118>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	440a      	add	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002188:	bf00      	nop
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40013800 	.word	0x40013800
 8002194:	51eb851f 	.word	0x51eb851f

08002198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002198:	b084      	sub	sp, #16
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	f107 0014 	add.w	r0, r7, #20
 80021a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	b004      	add	sp, #16
 80021b6:	4770      	bx	lr

080021b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80021c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80021c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4013      	ands	r3, r2
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002204:	b084      	sub	sp, #16
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	f107 0014 	add.w	r0, r7, #20
 8002212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	b004      	add	sp, #16
 8002242:	4770      	bx	lr

08002244 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <__libc_init_array>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	2500      	movs	r5, #0
 800225c:	4e0c      	ldr	r6, [pc, #48]	; (8002290 <__libc_init_array+0x38>)
 800225e:	4c0d      	ldr	r4, [pc, #52]	; (8002294 <__libc_init_array+0x3c>)
 8002260:	1ba4      	subs	r4, r4, r6
 8002262:	10a4      	asrs	r4, r4, #2
 8002264:	42a5      	cmp	r5, r4
 8002266:	d109      	bne.n	800227c <__libc_init_array+0x24>
 8002268:	f000 f822 	bl	80022b0 <_init>
 800226c:	2500      	movs	r5, #0
 800226e:	4e0a      	ldr	r6, [pc, #40]	; (8002298 <__libc_init_array+0x40>)
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <__libc_init_array+0x44>)
 8002272:	1ba4      	subs	r4, r4, r6
 8002274:	10a4      	asrs	r4, r4, #2
 8002276:	42a5      	cmp	r5, r4
 8002278:	d105      	bne.n	8002286 <__libc_init_array+0x2e>
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002280:	4798      	blx	r3
 8002282:	3501      	adds	r5, #1
 8002284:	e7ee      	b.n	8002264 <__libc_init_array+0xc>
 8002286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800228a:	4798      	blx	r3
 800228c:	3501      	adds	r5, #1
 800228e:	e7f2      	b.n	8002276 <__libc_init_array+0x1e>
 8002290:	08002308 	.word	0x08002308
 8002294:	08002308 	.word	0x08002308
 8002298:	08002308 	.word	0x08002308
 800229c:	0800230c 	.word	0x0800230c

080022a0 <memset>:
 80022a0:	4603      	mov	r3, r0
 80022a2:	4402      	add	r2, r0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	f803 1b01 	strb.w	r1, [r3], #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <_init>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	bf00      	nop
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr

080022bc <_fini>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr
